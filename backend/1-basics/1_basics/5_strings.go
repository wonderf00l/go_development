package main

import (
	"fmt"
	"unicode/utf8"
	"golang.org/x/text/unicode/norm"
)

// –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º —Å—Ç—Ä–æ–∫–∏ - —Å–ª–∞–π—Å—ã –±–∞–π—Ç

func main() {
	// –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é
	var str string
	norm.String()

	// —Å–æ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–∞–º–∏
	var hello string = "–ü—Ä–∏–≤–µ—Ç\n\t"

	// –±–µ–∑ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤, –ø–µ—Ä–µ–Ω–æ—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
	var world string = `–ú–∏—Ä\n\t 
	jtjtjrejlreer
	ertert
	ert
	er
	tsdsdff
	dfef
	`

	fmt.Println("str", str)
	fmt.Println("hello", hello)
	fmt.Println("world", world)

	// UTF-8 –∏–∑ –∫–æ—Ä–æ–±–∫–∏
	var helloWorld = "–ü—Ä–∏–≤–µ—Ç, –ú–∏—Ä!"
	hi := "‰Ω†Â•ΩÔºå‰∏ñÁïå <- üí©"

	fmt.Println("helloWorld", helloWorld)
	fmt.Println("hi", hi)

	// –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –±–∞–π—Ç (uint8): utf-7/8
	var rawBinary byte = '\x27'
	fmt.Printf("raw binary: %b", rawBinary)

	// —Å—Ç—Ä–æ–∫–∏ –∫ —Å–ª–∞–π—Å—É byte/rune

	// rune (uint32) –¥–ª—è utf-7/UTF-8/utf-16/utf-32 —Å–∏–º–≤–æ–ª–æ–≤(1-, 2-, 4-–±–∞–π—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏)
	var someChinese rune = 'Ëå∂'

	fmt.Println("info: ", rawBinary, someChinese)

	helloWorld = "–ü—Ä–∏–≤–µ—Ç –ú–∏—Ä üëã—ë"
	// –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
	andGoodMorning := helloWorld + " –∏ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"

	fmt.Println(helloWorld, andGoodMorning)

	// —Å—Ç—Ä–æ–∫–∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã
	// cannot assign to helloWorld[0]
	// helloWorld[0] = 72

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
	fmt.Println("get len in bytes/runes")
	fmt.Println(utf8.RuneCountInString("string"), '\n') // 6 10, 6 - –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ --> –∏—Å–ø–æ–ª—å–∑—É–µ–º rune —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ –æ–±—â–µ–º —Å–ª—É—á–∞–µ
	byteLen := len(helloWorld)                          // 26 –±–∞–π—Ç
	symbols := utf8.RuneCountInString(helloWorld)       // 13 —Ä—É–Ω

	fmt.Println(byteLen, symbols)

	// –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏, –≤ –±–∞–π—Ç–∞—Ö, –Ω–µ —Å–∏–º–≤–æ–ª–∞—Ö!
	hello = helloWorld[:12] // –ü—Ä–∏–≤–µ—Ç, 0-11 –±–∞–π—Ç—ã, –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –ë–ê–ô–¢–´, –ù–ï –°–ò–ú–í–û–õ–´!
	fmt.Println("hello:", hello, '\n')
	H := helloWorld[0] // byte, 208, –Ω–µ "–ü"(–∫–æ–¥ '–ü' - 1055, —Ç–æ –µ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å, –≤–º–µ—â–∞—é—â–∞—è—Å—è –≤ –±–∞–π—Ç)
	fmt.Println("first ch:", H)
	fmt.Println("convert to []rune, now 1st ch code:", []rune(helloWorld)[0])      // 1055
	fmt.Printf("convert to []rune, now 1st ch as sym:%c\n", []rune(helloWorld)[0]) // –ü
	for _, sym := range helloWorld {
		fmt.Printf("%T\n", sym) // int32
	}
	for _, sym := range "string" {
		fmt.Printf("%T\n", sym) // int32
	}

	// –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–∞–π—Å –±–∞–π—Ç –∏ –æ–±—Ä–∞—Ç–Ω–æ
	byteString := []byte(helloWorld) // –í–ó–ê–ò–ú–ù–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø
	helloWorld = string(byteString)

	fmt.Println(byteString, helloWorld)

	for i, ch := range "string" {
		fmt.Printf("%d %c\n", i, ch)
	}
}
