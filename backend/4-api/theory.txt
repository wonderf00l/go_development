желательно именовать сущности(массивы объекты и тп)
и возвращаем мета-информацию(статусы, коды ошибок и тд)

не должно быть null-ответов

лучше завязываться на свои статсуы и json ответы со статусами, 
т.к. http статус кодов можем не хватить + масштабируемость

gRPC - общенгие не по http а по grpc(микросервисы)

лучше генерить сваггер
через goDoc, параметры и тд

/api/... - начало пути между файл-сервером и api должно различаться
(с 1-ой стороны рабоат с json, с др - с файлами какого-то хранилища -- нужно разделять)

/api/v1/... - сохраняем обратную совместимость

сущности должны быть обособлены и не должны смешиваться

http verb иногда можем не хватать семантически

... .Methods('GET') --> post --> 405

{
    "status": 200,
    "body": {
        "photos": [
            {
                "id":1,
                "url":"/exmaple/img/i.png" 
            }
        ],
        "recommendations": {
            "videos": [
                {
                    "id":1,
                    "title": "..."
                }
            ]
        }
    }
}

обкладываем слайсы и др структуры(уязвимые участки памяти) мьютексом --> иначе будем падать с паникой

http.Error(responseWriter, ..., http status code)
or json encoder
как результат создания сущности можно возвращать id новой сущности

swagger генерим(как-то через godoc?)

graphql - позволяет выбирать только часть сущности для передачи по сети
определяем структуру(схему) ответа
описывается объект, его поля и тп

в урле указываем например id сущности и перечисляем поля, которые хотим получить
в ответе - json

обычно для сессий используется key-value хранилище

смена паролей - через userVersion в базе

когда создаем и ставим куку, нужно указывать path (например, path: "/") иначе по дефололту ставится только на url, по котормоу установлиил куки

OAuth - механизм помогащей идентифицировать user не имея его в своей бД
то есть позволяем юзеру не проходить процесс signup и использовать учетку другого сервиса
(credentials sharing)

